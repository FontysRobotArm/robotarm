<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{95304827-347d-4a06-bca0-c327a1e079aa}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR CONSTANT
	LOCAL_IP : T_IPv4Addr := '127.0.0.1';
	LOCAL_PORT : UDINT := 8080;

	REMOTE_IP : T_IPv4Addr := '192.168.3.1';
	REMOTE_PORT : UDINT := 8080;
	
	ROBOT_IP : T_IPv4Addr := '192.168.3.11';
	ROBOT_PORT : UDINT := 3920;
	
	MONARCO_IP : T_IPv4Addr := '192.168.3.125';
	MONARCO_PORT : UDINT := 8080;
	//TODO: Remove? not used anywhere afaik
	command : Command := ();
	message : Message := ();

END_VAR
VAR
	buttonConnectPressed : BOOL;
	buttonDisconnectPressed : BOOL;	
	buttonSendPressed : BOOL;
	buttonConnectToRobotPressed : BOOL;
	buttonDebugSendPressed : BOOL;
	buttonEnableMotorsPressed : BOOL;
	buttonDisableMotorsPressed : BOOL;
	
	connectTrigger : R_TRIG;
	disconnectTrigger : R_TRIG;
	sendTrigger : R_TRIG;
	connectToRobotTrigger : R_TRIG;
	debugSendTrigger : R_TRIG;
	enableMotorsTrigger : R_TRIG;
	disableMotorsTrigger : R_TRIG;
	
	client : TCPClient(ROBOT_IP, ROBOT_PORT, isEnabled := FALSE);
	LocalSystemTime : FB_LocalSystemTime;
	
	// COMMUNICATION message handling
	MessageBase : COMMUNICATION(CommunicationMODE := COM_MODE.Robot);
	messageHandler : MESSAGE_HANDLER();
	MessageERROR : int := 0;
	//
	
	connectionMessage : STRING(20) := 'Disconnected';
	isHeartbeatEnabled : BOOL := FALSE;
	
	closeAllConnections : FB_SocketCloseALL();
	closeAll : BOOL := TRUE;	//Close all on initial startup
	
	//messageToServer : T_MaxString := 'CRISTART 1 CMD Connect CRIEND';
	messageToServer : T_MaxString := 'Hello world 2.0 CRIEND';
	debugMessageToServer : T_MaxString := 'VAR Joint 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0';
	messageFromServer : STRING(GVL_Constants.MAX_RECEIVE_MESSAGE_LENGTH) := '';
	//finalSendMsg : STRING(100);
	
	heartbeatTimer : TON;
	heartbeatInterval : TIME := T#1S;
	
	sendCounter : INT := 1;
	finalAliveMessage : STRING(100) := '';
	totalMessagesFromServerCount : UDINT := 0;
	
	//TODO: Extract into fb? Separate task?
	currentTime : TIMESTRUCT;
	messageHistoryArray : ARRAY [0.. GVL_Constants.MAX_HISTORY_SIZE - 1] OF MessageLogData;
	currentHistoryIndex : BYTE := 0;
	currentMessageLogData : MessageLogData;
	
	//Testing
	dummyHeartbeatValues : STRING(80) := '40.0 50.0 40.0 30.0 30.0 0.0 0.0 0.0 0.0';
	

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//On PLC reset/program download, close all connections
IF (closeAll) THEN	
	closeAll := FALSE;
	closeAllConnections(sSrvNetId := '', bExecute := TRUE, tTimeout := T#10S);
ELSE
	closeAllConnections(bExecute := FALSE);
END_IF

IF (closeAllConnections.bBusy) THEN
	RETURN;	//Do not continue the program until all connections are closed
END_IF

// === ===

// === UI Handling ===
LocalSystemTime(bEnable := TRUE, tTimeout := T#1S, systemTime => currentTime);

connectTrigger(CLK := buttonConnectPressed);
disconnectTrigger(CLK := buttonDisconnectPressed);
sendTrigger(CLK := buttonSendPressed);
connectToRobotTrigger(CLK := buttonConnectToRobotPressed);
debugSendTrigger(CLK := buttonDebugSendPressed);
enableMotorsTrigger(CLK := buttonEnableMotorsPressed);
disableMotorsTrigger(CLK := buttonDisableMotorsPressed);

IF (client.IsConnected) THEN
	connectionMessage := 'Connected';
ELSE
	connectionMessage := 'Disconnected';
END_IF

IF (connectTrigger.Q) THEN
	CASE MessageBase.COMMUNICATION_MODE OF
	// check for communication mode and set IP for this mode.
		COM_MODE.Robot:
			client.RemoteServerAddress := ROBOT_IP;
			client.RemoteServerPort := ROBOT_PORT;
		
		COM_MODE.Monarco:
			client.RemoteServerAddress := MONARCO_IP;
			client.RemoteServerPort := MONARCO_PORT;
	END_CASE
	client.BindReceiveMessage(variableToBind := messageFromServer);
	client.Enable();
END_IF

IF (disconnectTrigger.Q) THEN
	client.Disable();
END_IF

// === Message Sending ===
CASE MessageBase.COMMUNICATION_MODE OF
	COM_MODE.Robot:
// ROBOT COM
		IF (sendTrigger.Q) THEN  // debug: send move command to robot.
			//TODO: Rework to use +- buttons (like in the C# application)
			client.Send(messageToSend := MessageBase.CREATE(COMMAND := 'VAR', COMMAND_DETAILS := 'Joint 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0', ERROR => MessageERROR));
		END_IF

		IF (debugSendTrigger.Q) THEN // debug: not in use yet.
			client.Send(messageToSend := MessageBase.CREATE(COMMAND := '', COMMAND_DETAILS := '', ERROR => MessageERROR));
		END_IF

		IF (connectToRobotTrigger.Q) THEN
			client.Send(messageToSend := MessageBase.CREATE(COMMAND := 'CMD', COMMAND_DETAILS := 'Connect', ERROR => MessageERROR));
			isHeartbeatEnabled := TRUE;
		END_IF

		IF (enableMotorsTrigger.Q) THEN
			client.Send(messageToSend := MessageBase.CREATE(COMMAND := 'CMD', COMMAND_DETAILS := 'Enable', ERROR => MessageERROR));
		END_IF
		
		IF (disableMotorsTrigger.Q) THEN
			client.Send(messageToSend := MessageBase.CREATE(COMMAND := 'CMD', COMMAND_DETAILS := 'Disable', ERROR => MessageERROR));
		END_IF
//		
	COM_MODE.Monarco:
// MONARCO COM
		IF (sendTrigger.Q) THEN 
			client.Send(messageToSend := MessageBase.CREATE(COMMAND := 'CMD', COMMAND_DETAILS := 'LED_ON', ERROR => MessageERROR));
		END_IF

		IF (debugSendTrigger.Q) THEN
			client.Send(messageToSend := MessageBase.CREATE(COMMAND := 'CMD', COMMAND_DETAILS := 'LED_OFF', ERROR => MessageERROR));
		END_IF
//
END_CASE

// === Message Receiving ===
IF (client.NewMessageAvailable(clearFlag := TRUE)) THEN
	//Update history
	IF (currentHistoryIndex >= GVL_Constants.MAX_HISTORY_SIZE) THEN
		//Ran out of history space, discard youngest member
		currentHistoryIndex := GVL_Constants.MAX_HISTORY_SIZE;
		ShiftHistoryLeft(arr := messageHistoryArray);
	ELSE
		//Can still append
		currentHistoryIndex := currentHistoryIndex + 1;
	END_IF
	
	//Handle message
	MessageBase.HANDLE(messageFromServer);
	
	//Add new entry
	currentMessageLogData.message := messageFromServer;	
	currentMessageLogData.systemTimeString := SYSTEMTIME_TO_STRING(in := currentTime);
	messageHistoryArray[currentHistoryIndex - 1] := currentMessageLogData;
END_IF
// === ===

// === Heartbeat ===
heartbeatTimer(IN := isHeartbeatEnabled, PT := heartbeatInterval);

IF (heartbeatTimer.Q AND client.IsClientEnabled) THEN
	heartbeatTimer(IN := FALSE);
	//TODO: Actual values
	dummyHeartbeatValues := '40.0 50.0 40.0 30.0 30.0 0.0 0.0 0.0 0.0';
	client.Send(messageToSend := MessageBase.CREATE('ALIVEJOG', dummyHeartbeatValues, ERROR => MessageERROR));
END_IF
// === ===

client(totalMessagesReceived => totalMessagesFromServerCount);]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="1090" Count="22" />
      <LineId Id="1284" Count="0" />
      <LineId Id="1113" Count="30" />
      <LineId Id="1204" Count="0" />
      <LineId Id="1144" Count="14" />
      <LineId Id="1359" Count="3" />
      <LineId Id="1159" Count="39" />
      <LineId Id="1203" Count="0" />
      <LineId Id="1280" Count="0" />
      <LineId Id="1199" Count="3" />
      <LineId Id="729" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>