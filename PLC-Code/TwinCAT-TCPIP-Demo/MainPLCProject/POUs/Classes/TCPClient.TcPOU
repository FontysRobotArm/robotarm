<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TCPClient" Id="{630acf1b-bc62-4d44-aa94-be4c83e2433f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TCPClient
VAR CONSTANT
	CLIENT_RECONNECT_TIME : TIME := T#31S;
	MAX_MESSAGE_LENGTH : INT := 255;
	MAX_RECEIVE_MESSAGE_LENGTH : UDINT := 1024;
END_VAR
VAR
	m_isClientEnabled : BOOL := TRUE;	
	m_serverNetID : STRING(80) := '';
	
	ClientServerConnection : FB_ClientServerConnection;
	SocketSend : FB_SocketSend;
	SocketReceive : FB_SocketReceive;
	m_clientDataExchanger : ClientDataExchanger;	//Note implemented yet: leave for later, use as
	m_socketHandle : T_HSOCKET;
	
	
	m_remoteServerAddress : T_IPv4Addr;	
	m_remoteServerPort : UDINT := 0;
	
	//Note: make it an input and send only when the class is called?
	m_messageToSend : T_MaxString := 'Hello world!';
	m_messageReceived : T_MaxString;	// The latest message received from the server //TODO: REMOVE, Depricated
	m_messageReceivedRef : REFERENCE TO STRING(MAX_RECEIVE_MESSAGE_LENGTH);
	
	m_isConnected : BOOL := FALSE;
	m_isBusy : BOOL;
	m_errorOccured : BOOL;
	m_lastErrorId : UDINT;
	
	
	m_currentSocketState : Tc2_TcpIp.E_SocketConnectionState;
	m_currentState : ClientState := ClientState.RECEIVING;	

	m_sendDataExchangeState : DataExchangeState := DataExchangeState.START;	
	m_sendRequested: BOOL;
	m_sendStatus : SendStatus;
	m_sendErrorId : UDINT;
	m_sendTimeout : TIME := T#15S;	//Note: Lower?
	
	//Receiving
	m_receiveDataExchangeState : DataExchangeState := DataExchangeState.IDLE;	
	m_isReceiveTimerEnabled : BOOL := TRUE;
	m_receiveTimer : TON();
	m_isReceiveTimeoutEnabled : BOOL := FALSE;	
	m_receiveTimeoutTimer : TON();
	m_receiveBuffer : STRING(MAX_RECEIVE_MESSAGE_LENGTH) := '';
	m_totalBytesReceived : UDINT := 0;
	m_receiveTimeout : TIME := T#1M;
	m_readInterval : TIME := T#10MS;
//	m_receiveMessageDelimiter : BYTE := F_ToASC(';');	//Note: Use plain 0 (without F_ToASC()) for \0
	m_receiveMessageDelimiter : BYTE := 0;	//'\0'
	m_receivedMessage : T_MaxString := '';
	m_receiveStatus : ReceiveStatus;
	m_newDataAvailable : BOOL := FALSE;	//Reset to false when it is read
	m_receiveErrorId : UDINT := 0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Handler code
//Does that need to be executed every cycle or can I put it in eSOCKET_DISCONNECTED state?
ClientServerConnection(sSrvNetID := m_serverNetID,
						 nMode := 0,
						 sRemoteHost := RemoteServerAddress,
						 nRemotePort := m_remoteServerPort,
						 tReconnect := CLIENT_RECONNECT_TIME,
						 bEnable := IsClientEnabled,
						 bBusy => m_isBusy,
						 bError => m_errorOccured,
						 nErrId => m_lastErrorId,
						 hSocket => m_socketHandle,
						 eState => m_currentSocketState);

CASE m_currentSocketState OF
	E_SocketConnectionState.eSOCKET_DISCONNECTED:
		m_isConnected := FALSE;
	//
	E_SocketConnectionState.eSOCKET_SUSPENDED:
	//Change from disconnected to connected or vise versa
		m_isConnected := FALSE;
	//
	E_SocketConnectionState.eSOCKET_CONNECTED:
		m_isConnected := TRUE;
END_CASE

IF (NOT m_isConnected) THEN
	RETURN;
END_IF

// Executed only if a connection is established

CASE m_currentState OF
	//
	ClientState.SENDING:
		m_sendStatus := SendMessage(messageToSend := m_messageToSend, timeout := m_sendTimeout, errorId => m_sendErrorId);
		IF (m_sendStatus = SendStatus.SUCCESS) THEN
			m_currentState := ClientState.RECEIVING;
		ELSIF (m_sendStatus = SendStatus.FAIL) THEN
			//Sending failed
			ADSLOGDINT(msgCtrlMask := ADSLOG_MSGTYPE_WARN, msgFmtStr := 'Send fail error: %d', dintArg := UDINT_TO_DINT(m_sendErrorId));
			m_currentState := ClientState.RECEIVING;
		END_IF
		
	//
	ClientState.RECEIVING:
	//Serves as Idle state for now, constant listening
		m_receiveStatus := Receive(timeout := m_receiveTimeout, 
									readInterval := m_readInterval, 
									messageDelimiter := m_receiveMessageDelimiter,
									errorId => m_receiveErrorId);
		
		IF (m_receiveStatus <> ReceiveStatus.RECEIVING) THEN
			IF (m_receiveStatus = ReceiveStatus.DONE) THEN
				//
				m_newDataAvailable := TRUE;
			END_IF
			
			IF (m_receiveStatus = ReceiveStatus.FAIL) THEN
				//Fail Handling
				LogToWarning(msgFmtStr := 'Receive fail error: %s', messageArg := UDINT_TO_STRING(m_receiveErrorId));
			END_IF
			
			IF (m_receiveStatus = ReceiveStatus.TIMEOUT) THEN
				//Timeout handling
				LogToWarning(msgFmtStr := 'Receive timed out', messageArg := '');
				//Disable();	//Disable on timeout
			END_IF
	
			IF (m_sendRequested) THEN
				m_sendRequested := FALSE;
				m_sendErrorId := 0;
				m_currentState := ClientState.SENDING;
			END_IF
		END_IF						
	
	// After done receiving, go to idle?
	//
END_CASE
]]></ST>
    </Implementation>
    <Method Name="BindReceiveMessage" Id="{b89604b0-6d7a-48be-b7d7-d776b5017de2}">
      <Declaration><![CDATA[METHOD PUBLIC BindReceiveMessage : BOOL
VAR_INPUT
	variableToBind : REFERENCE TO STRING(MAX_RECEIVE_MESSAGE_LENGTH);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_messageReceivedRef REF= variableToBind;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Disable" Id="{074f29a6-71a1-44fc-839d-e7fcd7d18dae}">
      <Declaration><![CDATA[METHOD PUBLIC Disable : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_isClientEnabled := False;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enable" Id="{f3086086-1f09-4097-81bc-c0f6f802b5bc}">
      <Declaration><![CDATA[METHOD PUBLIC Enable : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_isClientEnabled := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{82e27826-5d9f-466c-8b43-0a1669618e3e}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	remoteServerAddress : T_IPv4Addr := '127.0.0.1';
	remoteServerPort : UDINT := 8080;
	isEnabled : BOOL := FALSE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_remoteServerAddress := remoteServerAddress;
m_remoteServerPort := remoteServerPort;
m_isClientEnabled := isEnabled;]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsClientEnabled" Id="{75290428-b9dd-4f04-a5ab-76b3a6d88dd4}">
      <Declaration><![CDATA[PROPERTY IsClientEnabled : BOOL]]></Declaration>
      <Get Name="Get" Id="{7a680c5d-8f15-40b9-9925-3dbc595454a1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsClientEnabled := m_isClientEnabled;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="LastSendStatus" Id="{fcf387e3-b535-4bf3-94ce-d4c7972b1568}">
      <Declaration><![CDATA[PROPERTY LastSendStatus : SendStatus]]></Declaration>
      <Get Name="Get" Id="{060afe32-e517-4674-a7f8-af437e14b64c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[LastSendStatus := m_sendStatus;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="NewDataAvailable" Id="{5e1b1e70-cabd-4661-b41f-2646f69b5693}">
      <Declaration><![CDATA[PROPERTY PUBLIC NewDataAvailable : BOOL]]></Declaration>
      <Get Name="Get" Id="{56240a6e-549f-41db-b070-4da842263bc7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[//R_TRIG?
NewDataAvailable := m_newDataAvailable;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Receive" Id="{ecff7511-048a-4262-805e-93cdb66af916}">
      <Declaration><![CDATA[METHOD PRIVATE Receive : ReceiveStatus
VAR_INPUT
	timeout : TIME := T#10S;
	readInterval : TIME := T#10MS;
	messageDelimiter : BYTE := 0;
END_VAR

VAR_OUTPUT
	errorId : UDINT;
END_VAR

VAR
	errorOccurred : BOOL;	//can sty
	isBusy : BOOL;	//can stay																
	
	timedout : BOOL := FALSE;	//Output of TON
	receivedBytes : UDINT := 0;	//Output, should be fine to be here
	
	startPosition : UDINT := 0;	//Can stay, assigned before used
	endPosition : UDINT := 0;	//Can stay, assigned before used
	currentFrameLength : UDINT := 0; // Length of string received this cycle	//Should be fine
	
	index : UDINT := 0;	//For-loop index
	
	//EXAMPLE, NOT TO BE USED
	//fullServerMessage : STRING(MAX_RECEIVE_MESSAGE_LENGTH);
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_receiveTimer(IN := m_isReceiveTimerEnabled);
m_receiveTimeoutTimer(IN := m_isReceiveTimeoutEnabled, PT := timeout, Q => timedout);

CASE m_receiveDataExchangeState OF
	DataExchangeState.IDLE:
		//Reset variables
		m_isReceiveTimerEnabled := FALSE;
		m_receiveTimer(IN := m_isReceiveTimerEnabled, PT := T#0MS); 	//Do not wait for the first read
		m_isReceiveTimeoutEnabled := FALSE;
		Receive := ReceiveStatus.WAITING;
		m_receiveDataExchangeState := DataExchangeState.START;
	//
	DataExchangeState.START:
		Receive := ReceiveStatus.WAITING;
		m_isReceiveTimerEnabled := TRUE;
		IF (m_receiveTimer.Q) THEN
			SocketReceive(bExecute := FALSE);
			SocketReceive(sSrvNetId := m_serverNetID,
						  hSocket := m_socketHandle,
						  pDest := ADR(m_receiveBuffer) + m_totalBytesReceived,
						  cbLen := SIZEOF(m_receiveBuffer) - m_totalBytesReceived,
						  tTimeout := timeout,
						  bExecute := TRUE);	
			
			m_receiveDataExchangeState := DataExchangeState.WORKING;
		END_IF
	//
	DataExchangeState.WORKING:
		Receive := ReceiveStatus.RECEIVING;
		SocketReceive(bExecute := FALSE,
				tTimeout := timeout,
				bBusy => isBusy,
				bError => errorOccurred,
				nErrId => errorId,
				nRecBytes => receivedBytes);
		//Enable timeout
		IF (NOT isBusy AND NOT errorOccurred) THEN
			IF (receivedBytes > 0) THEN
				startPosition := m_totalBytesReceived;
				//Calculate new total
				m_totalBytesReceived := m_totalBytesReceived + receivedBytes;
				endPosition := m_totalBytesReceived - 1;
				currentFrameLength := 0;
				//Only proceed if we have enough space
				IF (m_totalBytesReceived < SIZEOF(m_messageReceivedRef)) THEN
//				IF (m_totalBytesReceived < MAX_RECEIVE_MESSAGE_LENGTH) THEN

					m_receiveTimer (PT := T#0MS); //Read asap
					//Bytes received, disable timeout check
					m_isReceiveTimeoutEnabled := FALSE;
					//Search for end of message delimiter
					FOR index := startPosition TO endPosition BY 1 DO
						IF (m_receiveBuffer[index] = messageDelimiter) THEN	//End of message check
							//End of message received
							currentFrameLength := index + 1;	//TODO: Check for overflow
							
							//TODO: Rework MEMCPY and MEMMOVE to utilize the larger size (Change m_messageReceiveRef and m_receiveBuffer's sizes
							
							MEMCPY(destAddr := ADR(m_messageReceivedRef), srcAddr := ADR(m_receiveBuffer), n := currentFrameLength);
							//Move the remaining data bytes to the begining
							MEMMOVE(ADR(m_receiveBuffer), ADR(m_receiveBuffer[currentFrameLength]), m_totalBytesReceived - currentFrameLength); 
							//Recalculate remaining data byte length
							m_totalBytesReceived := m_totalBytesReceived - currentFrameLength;
							//All received
							Receive := ReceiveStatus.DONE;
							m_receiveDataExchangeState := DataExchangeState.IDLE;
							EXIT;
						END_IF
					END_FOR
				ELSE	
					//No more space in the receive object
					Receive := ReceiveStatus.FAIL;
					m_receiveDataExchangeState := DataExchangeState.ERROR;
				END_IF //IF (totalBytesReceived < SIZEOF(receivedMessage))
			ELSE
				//No bytes received
				m_receiveTimer (PT := readInterval);
				m_isReceiveTimeoutEnabled := TRUE;
				
				//IF (timedout) THEN
				IF (m_receiveTimeoutTimer.Q) THEN
					Receive := ReceiveStatus.TIMEOUT;
					m_receiveDataExchangeState := DataExchangeState.ERROR;
				ELSE
					//Read again
					m_receiveDataExchangeState := DataExchangeState.START;
				END_IF
			END_IF //IF (receivedBytes > 0)
		
		ELSIF (errorOccurred) THEN
			Receive := ReceiveStatus.FAIL;
			m_receiveDataExchangeState := DataExchangeState.ERROR;
		END_IF	//IF (NOT isBusy AND NOT errorOccurred)
		
	//
	DataExchangeState.ERROR:
		//Variable resets in case of an error
		m_totalBytesReceived := 0;	//Reset counter
		m_receiveBuffer := DELETE(STR := m_receiveBuffer, POS := 1, LEN := 255);	//Reset receive buffer
		m_receiveDataExchangeState := DataExchangeState.IDLE;
	//
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Property Name="ReceivedData" Id="{4d9a9d15-08c1-451c-b8f3-d88e57a2c4e7}">
      <Declaration><![CDATA[//Note: After reading, NewDataAvailable returns false until new data arrives
PROPERTY ReceivedData : T_MaxString]]></Declaration>
      <Get Name="Get" Id="{da3ef2e7-8615-426f-bbf0-11ca016299e4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ReceivedData := m_receivedMessage;
m_newDataAvailable := FALSE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="RemoteServerAddress" Id="{ef9360c0-a6cc-4ba6-b9b5-fd611cce4517}">
      <Declaration><![CDATA[PROPERTY RemoteServerAddress : T_IPv4Addr]]></Declaration>
      <Get Name="Get" Id="{e06c6f35-a4db-4625-8855-9a673d10bb4c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[RemoteServerAddress := m_remoteServerAddress;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b971ac0c-a91d-4d47-b767-790fc034b84b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[m_remoteServerAddress := RemoteServerAddress;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="RemoteServerPort" Id="{74910999-5f28-40a8-9161-8fcc45493f78}">
      <Declaration><![CDATA[PROPERTY RemoteServerPort : UDINT]]></Declaration>
      <Get Name="Get" Id="{c8010d34-1ad8-4420-8c7b-ad71be36c427}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[RemoteServerPort := m_remoteServerPort;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c98f6ffe-c5c0-4bf1-943b-d8236103e9f8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[m_remoteServerPort := RemoteServerPort;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Send" Id="{a2cf4d8b-cd93-4e08-b951-54a335595f18}">
      <Declaration><![CDATA[METHOD Send : BOOL
VAR_INPUT
	messageToSend : T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_sendRequested := TRUE;
m_messageToSend := messageToSend;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SendMessage" Id="{632aaf75-a3ca-48a2-9c43-74795019bead}">
      <Declaration><![CDATA[//Wrapper for SocketSend. On error, check the errorId variable
METHOD PRIVATE SendMessage : SendStatus
VAR_INPUT
	messageToSend : T_MaxString;
	timeout : TIME;
END_VAR

VAR_OUTPUT
	errorId : UDINT := 0;
END_VAR

VAR
	errorOccurred : BOOL;	
	isBusy : BOOL;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE m_sendDataExchangeState OF
	DataExchangeState.START:
		errorId := 0;
		
		SocketSend(sSrvNetId := m_serverNetID,
				   hSocket := m_socketHandle,
				   cbLen := INT_TO_UDINT(LEN(messageToSend) + 1),
		   		   pSrc := ADR(messageToSend),
				   tTimeout := timeout,
				   bExecute := FALSE
				   );

		m_sendDataExchangeState := DataExchangeState.WORKING;
	//
	DataExchangeState.WORKING:
		
		SocketSend(bExecute := TRUE,
				   bError => errorOccurred,
		   		   nErrId => errorId,
		   		   bBusy => isBusy);
		
		IF (NOT isBusy AND NOT errorOccurred) THEN
			SendMessage := SendStatus.SUCCESS;
			m_sendDataExchangeState := DataExchangeState.START;
		ELSIF (errorOccurred) THEN
			SendMessage := SendStatus.FAIL;
			m_sendDataExchangeState := DataExchangeState.START;
		ELSIF (isBusy) THEN
			SendMessage := SendStatus.SENDING;
		END_IF 
	//
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateReceiveReferene" Id="{3476166c-9b01-4b60-906c-355f193cfa5f}">
      <Declaration><![CDATA[METHOD PRIVATE UpdateReceiveReferene : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT __ISVALIDREF(m_messageReceivedRef)) THEN
	RETURN;
END_IF
m_messageReceivedRef := m_messageReceived;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="TCPClient">
      <LineId Id="387" Count="49" />
      <LineId Id="466" Count="0" />
      <LineId Id="438" Count="8" />
      <LineId Id="534" Count="0" />
      <LineId Id="448" Count="3" />
      <LineId Id="535" Count="0" />
      <LineId Id="453" Count="12" />
      <LineId Id="91" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.BindReceiveMessage">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.Disable">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.Enable">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.FB_init">
      <LineId Id="7" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.IsClientEnabled.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.LastSendStatus.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.NewDataAvailable.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.Receive">
      <LineId Id="1464" Count="42" />
      <LineId Id="1508" Count="1" />
      <LineId Id="1597" Count="1" />
      <LineId Id="1510" Count="7" />
      <LineId Id="1599" Count="2" />
      <LineId Id="1518" Count="2" />
      <LineId Id="1522" Count="14" />
      <LineId Id="1538" Count="3" />
      <LineId Id="1567" Count="0" />
      <LineId Id="1542" Count="21" />
      <LineId Id="38" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.ReceivedData.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.RemoteServerAddress.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.RemoteServerAddress.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.RemoteServerPort.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.RemoteServerPort.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.Send">
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.SendMessage">
      <LineId Id="239" Count="9" />
      <LineId Id="274" Count="0" />
      <LineId Id="252" Count="21" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TCPClient.UpdateReceiveReferene">
      <LineId Id="6" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>